#+TITLE: dotfiles
#+AUTHOR: phua

* dotfiles

** Install

[[https://www.gnu.org/software/stow/][Stow - GNU Project - Free Software Foundation]]

#+BEGIN_SRC sh :file dotinstall.sh
git clone https://github.com/phua/dotfiles.git ${HOME}
# or, git clone git@github.com:phua/dotfiles.git ${HOME}

stow -d ${HOME}/dotfiles -t ${HOME} bash emacs mail term usenet
stow -d ${HOME}/dotfiles -t ${XDG_CONFIG_HOME} config
stow -d ${HOME}/dotfiles -t ${XDG_DATA_HOME} local/share

ln -s ${XDG_CONFIG_HOME}/w3m ${HOME}/.w3m
ln -s ${XDG_CONFIG_HOME}/X11/Xmodmap ${HOME}/.Xmodmap
#+END_SRC

* GitHub Basics

[[https://guides.github.com/][GitHub Guides]]

[[https://training.github.com/downloads/github-git-cheat-sheet/][GitHub Git Cheat Sheet - GitHub Cheatsheets]]

[[https://cli.github.com/][GitHub CLI | Take GitHub to the command line]]

Configure git.

#+BEGIN_SRC sh
git config --global user.name ${USER}
git config --global user.email ${USER}@users.noreply.github.com
git config --global color.ui auto

git config --global sslcainfo ...
git config --global autocrlf false
git config --global credential.helper 'cache --timeout=900'
#+END_SRC

Create repository...

#+BEGIN_SRC sh
mkdir -p ${REPOSITORY} && cd ${REPOSITORY}
git init
touch README.md
git commit -a -m 'first commit'
#+END_SRC

...and push upstream.

#+BEGIN_SRC sh
git remote add origin https://github.com/${USER}/${REPOSITORY}.git
git push -u origin master
#+END_SRC

Clone repository...

#+BEGIN_SRC sh
git clone https://github.com/${USER}/${REPOSITORY}.git ${REPOSITORY}
#+END_SRC

...and fork.

#+BEGIN_SRC sh
git remote add upstream https://github.com/${USER}/${REPOSITORY}.git
#+END_SRC

Rebase from upstream/master...

#+BEGIN_SRC sh
# git fetch upstream && git merge upstream/master && git pull upstream master
# or, git pull --rebase upstream master
git fetch upstream && git checkout master && git merge upstream/master
#+END_SRC

* TODO Git Incantations

[[https://git-scm.com/][Git]]

[[https://magit.vc/][It's Magit! A Git Porcelain inside Emacs]]

The purge ...

#+BEGIN_SRC sh
find . -type d -name ".svn" -exec git filter-branch --index-filter \
  'git rm -r --cached --ignore-unmatch {}' --force HEAD \;
#+END_SRC
